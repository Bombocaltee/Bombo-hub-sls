local Fluent = loadstring(game:HttpGet("https://github.com/dawid-scripts/Fluent/releases/latest/download/main.lua"))()
local SaveManager = loadstring(game:HttpGet("https://raw.githubusercontent.com/dawid-scripts/Fluent/master/Addons/SaveManager.lua"))()
local InterfaceManager = loadstring(game:HttpGet("https://raw.githubusercontent.com/dawid-scripts/Fluent/master/Addons/InterfaceManager.lua"))()

local Window = Fluent:CreateWindow({
    Title = "Bombo Hub v1",
    SubTitle = "by bombo",
    TabWidth = 160,
    Size = UDim2.fromOffset(580, 460),
    Acrylic = true, -- The blur may be detectable, setting this to false disables blur entirely
    Theme = "Dark",
    MinimizeKey = Enum.KeyCode.LeftControl -- Used when theres no MinimizeKeybind
})

local Tabs = {
Main = Window:AddTab({ Title = "Super League soccer", Icon = "" }),
    Settings = Window:AddTab({ Title = "Settings", Icon = "settings" })
}

local Options = Fluent.Options

do
    Fluent:Notify({
        Title = "Notification",
        Content = "Welcome to Bombo Hub!",
        SubContent = "Enjoy!", -- Optional
        Duration = 5 -- Set to nil to make the notification not disappear
    })

    Tabs.Main:AddButton({
        Title = "Hitbox v1",
        Description = "universal hitbox",
        Callback = function()
            Window:Dialog({
                Title = "Alert ⚠️",
                Content = "Once executed cant be undo",
                Buttons = {
                    {
                        Title = "Confirm",
                        Callback = function()
loadstring(game:HttpGet("https://pastebin.com/raw/0vYAmhTx"))()    print("Confirmed the dialog.")
                        end
                    },
                    {
                        Title = "Cancel",
                        Callback = function()
                            print("Cancelled the dialog.")
                        end
                    }
                }
            })
        end
    })

local Toggle = Tabs.Main:AddToggle("MyToggle", {Title = "Infinite stamina", Default = false })

    Toggle:OnChanged(function(value)
local Knit = require(game:GetService("ReplicatedStorage"):WaitForChild("Packages"):WaitForChild("Knit"))


repeat task.wait() until Knit.SharedInterfaceStates and Knit.SharedInterfaceStates.Stamina
local Stamina = Knit.SharedInterfaceStates.Stamina


task.spawn(function()
    while true do
        Stamina.Amount:set(100)
        task.wait(0.03)
    end
end)


local suc, controller = pcall(function()
    return Knit.GetController("StaminaController")
end)

if suc and controller and controller.Consume then
    controller.Consume = function(_, _) return true end
end
        print("Toggle changed:", Options.MyToggle.Value)
    end)

    Options.MyToggle:SetValue(false)

Tabs.Main:AddButton({
        Title = "jump power",
        Description = "loop jump power to perfect",
        Callback = function()
            Window:Dialog({
                Title = "Alert ",
                Content = "Please confirm before you execute it",
                Buttons = {
                    {
                        Title = "Confirm",
                        Callback = function(value)
local plr = game.Players.LocalPlayer
local char = plr.Character or plr.CharacterAdded:Wait()
local hum = char:WaitForChild("Humanoid")

hum.UseJumpPower = true

while true do
    hum.JumpPower = 54.5
    task.wait(1)
end
                            print("Confirmed the dialog.")
                        end
                    },
                    {
                        Title = "Cancel",
                        Callback = function()
                            print("Cancelled the dialog.")
                        end
                    }
                }
            })
        end
    })

local Slider = Tabs.Main:AddSlider("Slider", {
        Title = "Hitbox extender",
        Description = "increase hitbox",
        Default = 1,
        Min = 0,
        Max = 150,
        Rounding = 1,
        Onchanged = function(Value)
function hitbox(addAmount)
	local hitboxPart = workspace:FindFirstChild("Hitbox")
	if hitboxPart and hitboxPart:IsA("BasePart") then
		pcall(function()
			-- Get current size of the hitbox
			local currentSize = hitboxPart.Size

			-- Add the slider value to all dimensions
			local newSize = currentSize + Vector3.new(addAmount, addAmount, addAmount)

			-- Apply new properties
			hitboxPart.Size = newSize
			hitboxPart.Material = Enum.Material.Glass
			hitboxPart.BrickColor = BrickColor.White()
			hitboxPart.Transparency = 0.6
			hitboxPart.CanCollide = false
		end)
	end
end
            print("Slider was changed:", Value)

slider.OnChanged:Connect(function(value)
	hitbox(value)
end)

        end
    })

    end
